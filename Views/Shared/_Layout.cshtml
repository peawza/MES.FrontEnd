@using Microsoft.Extensions.Hosting;
@using Microsoft.AspNetCore.Hosting
@using System.Globalization;
@using Microsoft.Extensions.Options
@using WEB.APP.Localization
@inject IOptionsMonitor<CookieAuthenticationOptions> cookieOptions
@inject IWebHostEnvironment hostEnvironment;
@inject IMessageLocalizer MessageLocalizer
@{




    var uiCulture = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant();
    var appName = AppSharedData.ApplicationCompanyName;
    var companyName = AppSharedData.ApplicationCompanyName;
    var isAuthenticated = User.Identity.IsAuthenticated;
    var pageTitle = ViewBag.PageTitle ?? "";
    var pageIcon = ViewBag.PageIcon ?? "cube";
    var title = String.IsNullOrEmpty(pageTitle) ? string.Format("{0}", appName) : string.Format("{0} | {1} ", pageTitle, appName);

}
@{
    var userData = User.GetUserData();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="description" content="@appName" />
    <meta name="environment" content="@hostEnvironment.EnvironmentName" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />

    <title>@title</title>
    <script>
        let api_axios_delay = 200;
    </script>


    @await Html.PartialAsync("libs/_libs_css")
    @await Html.PartialAsync("libs/_libs_js")




    @RenderSection("Styles", required: false)
</head>

<body>
    @await Html.PartialAsync("_SidebarMenu")
    <main>
        <nav class="navbar navbar-light bg-navbar-toto ps-2 pe-2 shadow justify-content-start">
            <a href="#" class="btn btn-link bg-toggle js-menu-toggle">
                <span class="navbar-toggler-icon"></span>
            </a>
            <div class="ms-2 navbar-nav me-auto">
                <a asp-area="" asp-controller="Home" asp-action="Index" class="app-name" style="color:#003763">  @AppSharedData.ApplicationFullName </a>
            </div>
            <div class="dropdown">
                <div class="row me-3" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true">
                    <img class="img-fluid col-auto p-0" aria-expanded="false" style="height:26px;width:26px" src="~/assets/images/usericon.png">
                    <h3 class="name pt-1 col-auto" style=" color:#000000">@userData.UserName  </h3>
                </div>
                <div class="dropdown-menu dropdown-menu-right" style="left:unset;right:0" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="@Url.Action("Index", "Account",new { area = "" })" title="Manage Account"><i class="fas fa-user-circle"></i>Manage Account</a>

                    <a class="dropdown-item" href="@Url.Action("Logout", "Account",new { area = "" })" title="Sign out"><i class="fas fa-sign-out-alt"></i>SignOut</a>
                </div>
            </div>
            @*  <div class="p-1">
            <a href="@Url.Action("Logout", "Account",new { area = "" })" title="Sign out"> <img src="~/assets/images/nav_logout.png" class="img-fluid img-logut" title="Logout" /></a>
            </div> *@
        </nav>
        <div class="site-section" id="site-section">
            @if (isAuthenticated)
            {
                <!-- Page Title -->
                @if (!String.IsNullOrEmpty(pageTitle))
                {
                    <div class="page-title">
                        <div class="page-title-body "> @pageTitle  </div>


                    </div>

                }
                else
                {
                    <div class="mb-2"></div>
                }
            }
            <div class="page-content container-fluid mb-2 d-hidden" id="page-content">
                @RenderBody()
            </div>
        </div>
    </main>


    <div id="notifications" style="display:none"></div>
    <div id="ajax-notifications" style="display:none"></div>

    <div id="axios-loading" style="display:none"></div>

    <div id="loadingOverlay" class="d-none"></div>
    @RenderSection("Scripts", required: false)
</body>
</html>

<script>
    var UserName = "@User.GetUserData().UserName"


    function onNotificationShow(e) {
        //document.querySelector('main').classList.add('disabled-input-screen-load')

        //document.getElementById('site-section').classList.add('disabled-input-screen-load');
        document.getElementById('loadingOverlay').classList.remove('d-none');
        document.getElementById('loadingOverlay').innerText = '';
    }

    function onNotificationHide(e) {
        document.getElementById('loadingOverlay').classList.add('d-none');
        document.getElementById('loadingOverlay').innerText = '';
    }
    var axios_loading = $("#axios-loading").kendoNotification({
        show: onNotificationShow, hide: onNotificationHide,
        position: {
            pinned: true,
            bottom: 10,
            left: 10
        },
        animation: {
            open: {
                effects: "fadeIn"
            },
            close: {
                effects: "fadeOut"
            }
        },
        width: 400,
        autoHideAfter: 0,
        stacking: "down",
        templates: [
            {
                type: "progress",
                template: "<div class=\"\"><i class=\"fa-duotone fa-spinner-third fa-spin\"></i> #= message #</div>"
            }
        ]
    }).data("kendoNotification");
    $(document).ready(async function () {
        if ($("#ajax-notifications").data("kendoNotification") != undefined) {
            $("#ajax-notifications").data("kendoNotification")._events = $("#axios-loading").data("kendoNotification")._events
        }
    });


    let api_axios_count = 0;
    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    axios.interceptors.request.use(function (config) {
        api_axios_count += 1;

        let axios_loading_length = document.querySelectorAll("." + axios_loading._guid).length;

        if (axios_loading_length == 0 && document.readyState === 'complete') {

            axios_loading.show({ message: 'Please wait while data is loading..' }, "progress");
        }



        return config;
    },async function (error) {
        api_axios_count--;
        setTimeout(() => {
            if (api_axios_count == 0 && document.readyState === 'complete') {
                axios_loading.hide();
            }
        }, api_axios_delay);


        return Promise.reject(error);
    });



    // Add a response interceptor
    axios.interceptors.response.use(async function (response) {
        api_axios_count--;
        setTimeout(() => {
            if (api_axios_count == 0) {
                axios_loading.hide();
            }
        }, api_axios_delay);

        return response;
    }, async function (error) {
        api_axios_count--;
        setTimeout(() => {
            if (api_axios_count == 0) {
                axios_loading.hide();
            }
        }, api_axios_delay);

        return Promise.reject(error);
    });





    window.addEventListener('load', async (event) => {
        if (document.readyState === 'complete') {

            await delay(500);

            document.getElementById('page-content').classList.remove('d-hidden');
            //console.log('Document and all sub-resources have finished loading');
        }




    });

</script>
